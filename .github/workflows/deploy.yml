name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2

jobs:
  # CI Job: 빌드, 테스트, 이미지 생성
  build-and-test:
    name: Continuous Integration
    runs-on: ubuntu-latest

    steps:
      # 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # JDK 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Gradle 권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 테스트 실행
      - name: Run tests
        run: ./gradlew test

      # JAR 빌드 (SNAPSHOT 파일 생성)
      - name: Build with Gradle
        run: ./gradlew clean build

      # AWS 자격증명 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:latest

  # CD Job: 배포
  deploy:
    name: Deploy to EC2 instance
    runs-on: ubuntu-latest
    needs: build-and-test

    environment:
      name: production
      url: http://${{ secrets.EC2_HOST }}:8080

    steps:
      # EC2 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            echo "🔧 Configuring AWS CLI..."
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set default.region ap-northeast-2
            
            echo "🔑 Logging in to ECR..."
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
            
            echo "⏹️ Stopping existing services..."
            docker-compose down || true
            
            echo "📥 Pulling latest image..."
            docker pull ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest
            
            echo "📝 Creating environment file..."
            cat > .env << EOF
            ECR_REGISTRY=${{ secrets.ECR_REGISTRY }}
            ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY }}
            MYSQL_URL=${{ secrets.MYSQL_URL }}
            MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_ACCESSTOKEN_EXPIRATION=${{ secrets.JWT_ACCESSTOKEN_EXPIRATION }}
            JWT_REFRESHTOKEN_EXPIRATION=${{ secrets.JWT_REFRESHTOKEN_EXPIRATION }}
            REDIS_HOST=redis
            REDIS_PORT=6379
            AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}
            AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}
            EOF
            
            echo "🚀 Starting services..."
            docker-compose up -d
            
            echo "⏳ Waiting for services to be ready..."
            sleep 30
            
            echo "🧹 Cleaning up unused images..."
            docker image prune -f
            
            echo "✅ Deployment completed successfully!"